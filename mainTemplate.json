{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "_generator": {
        "name": "bicep",
        "version": "0.5.6.12127",
        "templateHash": "17016281914347876853"
      }
    },
    "parameters": {
      "accountName": {
        "type": "string",
        "defaultValue": "ddcosmo",
        "metadata": {
          "description": "Name for the container group"
        }      },
      "databaseName": {
        "type": "string",
        "defaultValue": "digitalDashboard",
        "metadata": {
          "description": "Name for the container group"
        }
      },
      "containers": {
        "type": "array",
        "defaultValue": [
          {
            "name": "user_master",
            "partitionKey": "/emailid"
          }
        ],
        "metadata": {
          "description": "Name for the container group"
        }
      },
        "tenentId":{
            "type": "string",
                "metadata": {
                "description": "Name for the dd tenent"
                }
        },
        "clientid":{
            "type": "string",
                "metadata": {
                "description": "Name for the dd clienti"
                }
        },
      "name": {
        "type": "string",
        "defaultValue": "acilinuxpublicipcontainergroup",
        "metadata": {
          "description": "Name for the container group"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "image": {
        "type": "string",
        "defaultValue": "mcr.microsoft.com/azuredocs/aci-helloworld",
        "metadata": {
          "description": "Container image to deploy. Should be of the form repoName/imagename:tag for images stored in public Docker Hub, or a fully qualified URI for other registries. Images from private registries require additional registry credentials."
        }
      },
      "port": {
        "type": "int",
        "defaultValue": 80,
        "metadata": {
          "description": "Port to open on the container and the public IP address."
        }
      },
      "cpuCores": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "The number of CPU cores to allocate to the container."
        }
      },
      "memoryInGb": {
        "type": "int",
        "defaultValue": 2,
        "metadata": {
          "description": "The amount of memory to allocate to the container in gigabytes."
        }
      },
      "restartPolicy": {
        "type": "string",
        "defaultValue": "Always",
        "allowedValues": [
          "Always",
          "Never",
          "OnFailure"
        ],
        "metadata": {
          "description": "The behavior of Azure runtime if container has stopped."
        }
      }
    },
    "resources": [
      {
        "type": "Microsoft.ContainerInstance/containerGroups",
        "apiVersion": "2021-09-01",
        "name": "[parameters('name')]",
        "location": "[parameters('location')]",
        "properties": {
          "containers": [
            {
              "name": "[parameters('name')]",
              "properties": {
                "image": "[parameters('image')]",
                "ports": [
                  {
                    "port": "[parameters('port')]",
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "requests": {
                    "cpu": "[parameters('cpuCores')]",
                    "memoryInGB": "[parameters('memoryInGb')]"
                  }
                }
              }
            }
          ],
          "osType": "Linux",
          "restartPolicy": "[parameters('restartPolicy')]",
          "ipAddress": {
            "type": "Public",
            "ports": [
              {
                "port": "[parameters('port')]",
                "protocol": "TCP"
              }
            ]
          }
        }
      },
      {
        "name": "[parameters('accountName')]",
        "type": "Microsoft.DocumentDB/databaseAccounts",
        "apiVersion": "2019-12-12",
        "location": "[parameters('location')]",
        "kind": "GlobalDocumentDB",
        "properties": {
          "consistencyPolicy": {
            "defaultConsistencyLevel": "Eventual",
            "maxStalenessPrefix": 1,
            "maxIntervalInSeconds": 5
          },
          "locations": [
            {
              "locationName": "[parameters('location')]",
              "failoverPriority": 0
            }
          ],
          "databaseAccountOfferType": "Standard",
          "enableAutomaticFailover": false
        }
      },
      {
        "type": "Microsoft.DocumentDB/databaseAccounts/apis/databases",
        "name": "[concat( parameters('accountName'), '/sql/', parameters('databaseName'))]",
        "apiVersion": "2016-03-31",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/', parameters('accountName'))]"
        ],
        "properties": {
          "resource": {
            "id": "[parameters('databaseName')]"
          },
          "options": {
            "throughput": 400
          }
        }
      },
      {
        "type": "Microsoft.DocumentDb/databaseAccounts/apis/databases/containers",
        "name": "[concat(parameters('accountName'), '/sql/', parameters('databaseName'), '/', parameters('containers')[copyIndex()].name)]",
        "copy": {
          "name": "ContainerCopy",
          "count": "[length(parameters('containers'))]"
        },
        "apiVersion": "2016-03-31",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/apis/databases', parameters('accountName'), 'sql', parameters('databaseName'))]"
        ],
        "properties": {
          "resource": {
            "id": "[parameters('containers')[copyIndex()].name]",
            "partitionKey": {
              "paths": ["[parameters('containers')[copyIndex()].partitionKey]"],
              "kind": "hash"
            },
            "indexingPolicy": {
              "indexingMode": "consistent"
            }
          }
        }
      }
    ],
    "outputs": {
      "containerIPv4Address": {
        "type": "string",
        "value": "[reference(resourceId('Microsoft.ContainerInstance/containerGroups', parameters('name'))).ipAddress.ip]"
      }
    }
  }